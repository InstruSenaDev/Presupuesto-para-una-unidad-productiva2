<script>
  const idusuario = localStorage.getItem('idusuario');

  // Función para obtener los productos del usuario
  async function fetchProductos() {
    try {
      // Hacemos una solicitud GET a la URL para obtener la lista de productos
      const response = await fetch(`http://localhost:3000/traerProductos/${idusuario}`);
      
      // Verifica si la respuesta es exitosa
      if (!response.ok) {
        throw new Error(`Error en la solicitud: ${response.status}`);
      }
      
      // Convertimos la respuesta a JSON
      const productos = await response.json();

      // Mostrar el tipo de datos recibidos
      console.log('Tipo de dato recibido:', typeof productos);
      console.log('Datos recibidos:', productos);

      // Verificamos si productos es un array
      if (Array.isArray(productos)) {
        return productos;
      } else {
        console.error("La respuesta de productos no es un array:", productos);
        return [];
      }
    } catch (error) {
      console.error("Error al obtener productos:", error);
      return [];
    }
  }

  // Variable para almacenar los productos
  let productos = [];

  // Llamada a la función fetchProductos y renderizado de los productos
  fetchProductos().then((data) => {
    productos = data;
    renderProductos(); // Renderiza los productos solo si la respuesta es válida
  });

  const seleccionados = [];
  let total = 0;

  // Función para renderizar la tabla de productos
  function renderProductos() {
    const tbody = document.getElementById('productos-tbody');

    // Limpiamos el contenido existente
    // tbody.innerHTML = '';

    // Verificamos si productos es un array antes de hacer el forEach
    if (Array.isArray(productos)) {
      productos.forEach((producto, index) => {
        const tr = document.createElement('tr');
        tr.classList.add('border-t');

        tr.innerHTML = `
          <td class="text-center p-2">${producto.nombre}</td>
          <td class="text-center p-2">${producto.codigo}</td>
          <td class="text-center p-2">${producto.valorunitario}</td>
          <td class="text-center p-2">${producto.estado}</td>
          <td class="text-center pl-2">
            <button class="text-center font-bold plus-circle" data-index="${index}">
              <i class="bi bi-plus-circle"></i>
            </button>
          </td>
        `;

        tbody.appendChild(tr);
      });

      // Añadimos los eventos a los botones después de renderizar la tabla
      document.querySelectorAll(".plus-circle").forEach((button) => {
        button.addEventListener("click", () => {
          const index = button.getAttribute("data-index");
          const producto = productos[index];
          const existente = seleccionados.find((item) => item.codigo === producto.codigo);

          if (existente) {
            existente.cantidad += 1;
          } else {
            seleccionados.push({ ...producto, cantidad: 1 });
          }

          actualizarTotal();
          renderizarSeleccionados();
        });
      });
    } else {
      console.error("No se pueden renderizar los productos porque no son un array");
    }
  }

  // Función para calcular el total acumulado
  function actualizarTotal() {
    total = seleccionados.reduce((sum, item) => sum + item.valorunitario * item.cantidad, 0);
    document.getElementById("total-valor").textContent = `Total: $${total.toLocaleString()}`;
  }

  // Función para renderizar los productos seleccionados
  function renderizarSeleccionados() {
    const lista = document.getElementById("seleccionados-lista");
    lista.innerHTML = '';

    seleccionados.forEach((item) => {
      const li = document.createElement('li');
      li.classList.add('flex', 'justify-between', 'items-center', 'mb-2');

      li.innerHTML = `
        <span>${item.nombre}<br><small class="text-gray-500">${item.cantidad} Unidades x $${item.valorunitario}</small></span>
        <span class="text-indigo-700 font-bold">$${(item.valorunitario * item.cantidad).toLocaleString()}</span>
      `;

      lista.appendChild(li);
    });
  }
</script>
